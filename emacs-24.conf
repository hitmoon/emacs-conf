(global-linum-mode t)
(set-face-background 'linum "light grey")

;; (setq initial-frame-alist '((top . 30) (left . 30)
;; 			    (width . 81) (height . 30)))

;; (setq default-frame-alist '((top . 30) (left . 30)
;; 			    (width . 81) (height . 30)))
(add-to-list 'default-frame-alist '(font . "DejaVu Sans Mono-13"))
;
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

(setq x-select-enable-clipboard t)
(fset 'yes-or-no-p 'y-or-n-p)
(setq frame-title-format 
      '((:eval (user-real-login-name))
	"=>"
	(:eval (buffer-file-name))))

(setq display-time-mail-string "")
(setq display-time-interval 1)
(setq display-time-format "%Y-%m-%d %H:%M:%S")
(display-time-mode)
(add-to-list 'load-path "~/.emacs.d/plugins")
(let ((default-directory "~/.emacs.d/plugins"))
  (normal-top-level-add-to-load-path
   '("color-theme-6.6.0" "yasnippet" "auto-complete"))
  (load-file "window-numbering.el"))

(let ((default-directory "~/.emacs.d/elpa"))
  (normal-top-level-add-to-load-path
   '("company-0.8.12" "irony-20151217.1058")))

;; (global-ede-mode t)
;; (require 'cedet)
;; (require 'srecode)
;; (global-srecode-minor-mode 1)

(require 'semantic)
(global-semanticdb-minor-mode 1)
(global-semantic-idle-scheduler-mode 1)
(semantic-mode 1)
(semantic-add-system-include "/usr/include")

;; auto semantic complete
(global-set-key (kbd "C-\\") 'semantic-complete-analyze-inline)

;; (semantic-load-enable-minimum-features)
;; (semantic-load-enable-code-helpers)
;; (semantic-load-enable-gaudy-code-helpers)

(require 'irony)
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)

(require 'company)
(add-hook 'after-init-hook 'global-company-mode)
(setq company-idle-delay .3)
(setq company-minimum-prefix-length 2)

(require 'company-irony)
(eval-after-load 'company
		 '(add-to-list
		   'company-backends
		   '(company-irony company-irony-c-headers))
		 )

;; replace the `completion-at-point' and `complete-symbol' binding in
;; irony-mode's buffers by irony-mode's function
(defun my-irony-mode-hook ()
  (define-key irony-mode-map [remap completion-at-point]
    'irony-completion-at-point-async)
  (define-key irony-mode-map [remap complete-symbol]
    'irony-completion-at-point-async))
(add-hook 'irony-mode-hook 'my-irony-mode-hook)
(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)

;; (window-numbering-mode)
;; (require 'smex)
;; (smex-initialize)

(require 'package)
(add-to-list 'package-archives
	     '("melpa" . "https://melpa.org/packages/") t)
(when (< emacs-major-version 24)
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/")))
(package-initialize)

(setq ecb-tip-of-the-day nil)
(setq stack-trace-on-error t)
(autoload 'speedbar-frame-mode "speedbar" "Popup a speedbar frame" t)
(autoload 'speedbar-get-focus "speedbar" "Jump to speedbar frame" t)

;; (require 'ecb-autoloads)
;; (require 'cflow-mode)

;; active yasnippet
(require 'yasnippet)
(yas/initialize)
(setq yas-snippet-dirs "~/.emacs.d/plugins/yasnippet/snippets")
(yas-global-mode 1)

;; auto complete mode
;; (require 'auto-complete-config)
;; (add-to-list 'ac-dictionary-directories "~/.emacs.d/plugins/ac-dict")
;; (ac-config-default)
;; (ac-set-trigger-key "TAB")

(require 'srefactor)
(define-key c-mode-map (kbd "M-RET") 'srefactor-refactor-at-point)
(define-key c++-mode-map (kbd "M-RET") 'srefactor-refactor-at-point)

(setq-default mode-line-format
                '("%e"
                  mode-line-mule-info
                  mode-line-modified
                  " "
                  mode-line-position
                  (vc-mode vc-mode)
		  " "
                  mode-line-modes
                  (which-func-mode ("" which-func-format))
		  (global-mode-string ("" global-mode-string))
		  " "
		  ;(:eval (buffer-file-name))
		  "%-"
		  ))


(setq make-backup-files nil)
(setq auto-save-mode nil)
(setq auto-save-default nil)
(setq inhibit-startup-message t)
(setq column-number-mode t)
(blink-cursor-mode nil)

(put 'downcase-region 'disabled nil)

(desktop-save-mode 1)
(setq desktop-dirname "~/.emacs.d")
;; (desktop-change-dir "~/.emacs.d/")

;; tabs
(defun how-many-region (begin end regexp &optional interactive)
  "Print number of non-trivial matches for REGEXP in region.
Non-interactive arguments are Begin End Regexp"
  (interactive "r\nsHow many matches for (regexp): \np")
  (let ((count 0) opoint)
    (save-excursion
      (setq end (or end (point-max)))
      (goto-char (or begin (point)))
      (while (and (< (setq opoint (point)) end)
                  (re-search-forward regexp end t))
        (if (= opoint (point))
            (forward-char 1)
          (setq count (1+ count))))
      (if interactive (message "%d occurrences" count))
      count)))

(defun infer-indentation-style ()
  ;; if our source file uses tabs, we use tabs, if spaces spaces, and if
  ;; neither, we use the current indent-tabs-mode
  (let ((space-count (how-many-region (point-min) (point-max) "^  "))
        (tab-count (how-many-region (point-min) (point-max) "^\t")))
    (if (> space-count tab-count) (setq indent-tabs-mode nil))
    (if (> tab-count space-count) (setq indent-tabs-mode t))))

(setq-default tab-width 8)
;; smart tabs mode set
(setq-default indent-tabs-mode nil)
(infer-indentation-style)

;; tab-stop-list
(setq tab-stop-list (number-sequence 4 120 4))

(require 'color-theme)
(color-theme-initialize)
(color-theme-dark-blue)

;; (require 'xcscope)
;; (cscope-set-initial-directory "/home/hitmoon/work/android/cscope/kernel")

;; gtags
(setq gtags-suggested-key-mapping t)
(autoload 'gtags-mode "gtags" "" t)
(add-hook 'c-mode-hook
	  (lambda ()
	    (gtags-mode 1)
            (define-key gtags-mode-map (kbd "C-c u") 'update-gtags)))

(add-hook 'c++-mode-hook
	  (lambda ()
	    (gtags-mode 1)
            (define-key gtags-mode-map (kbd "C-c u") 'update-gtags)))


(defun update-gtags()
  "update gtags"
  (interactive)
  (start-process-shell-command "update-gtags-index" "GTAGS-Update" "global -u")
  (message "update gtags index ..."))


;; (require 'ecb)
(defun custom_ecb ()
"set my custom ecb configure"
(interactive)
(progn

  (defecb-window-dedicator ecb-set-cscope-buffer " *ECB cscope-buf*"
    "create ecb cscope buffer"
    (switch-to-buffer "*cscope*"))

  ;; a simple ecb-layout
  (ecb-layout-define "my-ecb-layout" left nil
		     (ecb-set-methods-buffer)
		     (ecb-split-ver 0.5 t)
		     (other-window 1)
		     (ecb-set-sources-buffer)
		     (other-window 1)
					;(ecb-set-cscope-buffer)
					;(ecb-split-ver 0.2 t)
		     (select-window (next-window)))

  (setq ecb-show-sources-in-directories-buffer "my-ecb-layout")
  ))


(defvar cmd nil nil)
(defvar cflow-buf nil nil)
(defvar cflow-buf-name nil nil)

(defun get-cflow (function-name)
  "Get call graph of input function."
  (interactive 
   ;(list (car (senator-jump-interactive "Function name:" nil nil nil))))
   "sFunction name:\n")
  (message function-name)
  (setq cmd (format "cflow -b --main=%s %s" function-name buffer-file-name))
  (setq cflow-buf-name (format "** cflow-%s:%s **"
			       (file-name-nondirectory buffer-file-name)
			       function-name))
  (setq cflow-buf (get-buffer-create cflow-buf-name))
  (set-buffer cflow-buf)
  (setq buffer-read-only nil)
  (erase-buffer)
  (insert (shell-command-to-string cmd))
  (pop-to-buffer cflow-buf)
  (goto-char (point-min))
  (cflow-mode)
)

(defvar ecb-flag nil nil)

(defun start-ecb()
  (interactive)
  (if (not ecb-flag)
      (progn 
	;;(setq ecb-layout-name "my-ecb-layout")
	(setq ecb-windows-width 0.25)
	(ecb-activate)
	(setq ecb-flag "started"))
      nil))

(defun stop-ecb()
  (interactive)
  (if ecb-flag
      (progn
	(ecb-deactivate)
	(setq ecb-flag nil))
      nil))

(add-hook 'python-mode-hook
	  (lambda ()
	    (setq python-indent 4)
		))

(prefer-coding-system 'utf-8)

(c-add-style "qemu" 
	     '((c-basic-offset . 4)
	      (c-comment-only-line-offset . 0)
	      (c-hanging-braces-alist
	       (brace-list-open)
	       (brace-entry-open)
	       (substatement-open after)
	       (block-close . c-snug-do-while)
	       (arglist-cont-nonempty))
	      (c-cleanup-list brace-else-brace)
	      (c-offsets-alist
	       (statement-block-intro . +)
	       (knr-argdecl-intro . 0)
	       (substatement-open . 0)
	       (substatement-label . 0)
	       (label . 0)
	       (statement-cont . +))))

(defun qemu-c-mode()
  "C mode with qemu develop style"
  (interactive)
  (setq indent-tabs-mode nil)
  (setq c-indent-level 4)
  (setq c-basic-offset 4))

(add-hook 'c++-mode-hook
	  (lambda ()
	    (c-set-style "stroustrup")
))

(add-hook 'c-mode-hook
	  (lambda ()
	    (c-set-style "stroustrup")
	    (if (string-match-p ".*/qemu[^/]*/.*\\.[ch]" buffer-file-name)
                (qemu-c-mode)
              (if (string-match-p ".*/linux[^/]*/.\\.[Sch]" buffer-file-name)
                  (c-set-style "linux"))
)))

; maximum screen
(defun full-screen()
  "maximum current screen"
  (interactive)
  (x-send-client-message
   nil 0 nil "_NET_WM_STATE" 32 '(2 "_NET_WM_STATE_FULLSCREEN" 0))
  (if ecb-flag
      (progn
	(stop-ecb)
	(start-ecb))
      nil))

(defun max-horizon()
  "maximum size horizon"
  (interactive)
  (x-send-client-message
   nil 0 nil "_NET_WM_STATE" 32 '(2 "_NET_WM_STATE_MAXIMIZED_HORZ" 0)))
(defun max-vertical()
  "maximum size vertical"
  (interactive)
  (x-send-client-message
   nil 0 nil "_NET_WM_STATE" 32 '(2 "_NET_WM_STATE_MAXIMIZED_VERT" 0)))

(defun max-size()
  "maximun size"
  (interactive)
  (x-send-client-message
   nil 0 nil "_NET_WM_STATE" 32 '(2 "_NET_WM_STATE_MAXIMIZED_HORZ" 0))
  (x-send-client-message
   nil 0 nil "_NET_WM_STATE" 32 '(2 "_NET_WM_STATE_MAXIMIZED_VERT" 0))
  (if ecb-flag
      (progn 
	(stop-ecb)
	(start-ecb))
      nil))

;; easy copy functions
(defun copy-line (&optional arg)
  "Save current line into Kill-Ring without mark the line"
  (interactive "P")
  (let ((beg (line-beginning-position))
	(end (line-end-position arg)))
    (copy-region-as-kill beg end)))

(defun copy-word (&optional arg)
  "Copy words at point"
  (interactive "P")
  (let ((beg (progn (if (looking-back "[0-9a-zA-Z]" 1) 
			(backward-word 1))
		    (point)))
	(end (progn (forward-word arg) (point))))
    (copy-region-as-kill beg end)))

(defun copy-paragraph (&optional arg)
  "Copy paragraphes at point"
  (interactive "P")
  (let ((beg (progn (backward-paragraph 1) (point)))
	(end (progn (forward-paragraph arg) (point))))
    (copy-region-as-kill beg end)))

(defun set-region (cmd)
  "select a region by line number like ed"
  (interactive "sInput: ")
  (let* ((addr (split-string (substring cmd 0 (string-match "[ ]" cmd)) ","))
	 (act (substring cmd (string-match "s" cmd)))
	 (beg (nth 0 addr))
	 (end (nth 1 addr)))
    (if (not (and (string-match-p "[0-9]+\\|[.]" beg)
		  (string-match-p "[0-9]+\\|[$]" end)))
	(message "Invalid prefix address!")
      (progn
	;(message "beg=%s end=%s act=%s" beg end act)
	; determine the beg 
	(if (not (string-equal beg "."))
	    (goto-line (string-to-number beg))
	  )
	(setq beg (point))
	; dtermine the end
	(if (string-equal end "$")
	    (setq end (point-max))
	  (progn 
	    (goto-line (string-to-number end))
	    (end-of-line)
	    (setq end (point))
	    ))
	(list beg end act)
      ))))


(defun replace-region ()
 "replace a region as vim do"
 (interactive)
    (let* ((cmd-list (call-interactively 'set-region))
	   (beg (nth 0 cmd-list))
	   (end (nth 1 cmd-list))
	   (act (nth 2 cmd-list)))

      ;(message "cmd=%s" cmd-list)
      (if (not (string-match-p "^s[,@/].+[,@/].*[,@/]" act))
	  (message "Operation not supported!")
 	; start parse the atc 
	(let ((src (nth 1 (split-string act (substring act 1 2))))
	      (target (nth 2 (split-string act (substring act 1 2)))))
	  (goto-char beg)
	  (replace-regexp src target nil beg end)
	   ))))

(defun insert-changelog ()
  "insert change log to rpm spec file"
  (interactive)
  (progn
    (forward-line)
    (insert (concat "* " (format-time-string "%a %b %d %Y") " xiaoqiang.zhao <xiaoqiang.zhao@i-soft.com.cn> - ")
    )
    ))

(defun insert-CR ()
  "insert copy right information at begining of c/c++ file"
  (interactive)
  (let ((copyinfo " * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>")
	(file-type (last (split-string buffer-file-name "\\."))))
    (goto-line 1)
    (insert
     (concat "/*\n * Copyright (C) "  (format-time-string "%Y")
	     " hitmoon <zxq_yx_007@163.com> \n *\n"
	     copyinfo
	     "\n *\n */\n"))))

(defun mark-end-of-line ()
  "mark a line"
  (interactive)
  (progn
    (move-beginning-of-line 1)
    (set-mark-command nil)
    (move-end-of-line 1)
    (message "mark this line!")
    ))

(defun only-new-lines ()
  "replace newline with char ortab with only newlines"
  (interactive)
  (progn
    (goto-char (point-min))
    (while (re-search-forward "^\\(\t\\| \\)+$" nil t)
      (replace-match "")
      (forward-char 1))
    (message "newlines is now clean for git diff!")))



;; key bindings
(global-set-key (kbd "C-c c c") 'insert-changelog)
(global-set-key [f8] 'compile)
(global-set-key (kbd "C-c c l") 'copy-line)
(global-set-key (kbd "C-c c w") 'copy-word)
(global-set-key (kbd "C-c c p") 'copy-paragraph)
(global-set-key (kbd "C-c k l") 'kill-whole-line)
(global-set-key (kbd "C-c k p") 'kill-paragraph)
(global-set-key (kbd "C-c v") 'replace-region)
(global-set-key (kbd "C-c c u") 'uncomment-region)
(global-set-key (kbd "C-c c r") 'comment-region)
(global-set-key (kbd "C-c c n") 'only-new-lines)
(global-set-key (kbd "C-c r") 'insert-CR)
(global-set-key (kbd "C-'") 'mark-end-of-sentence)
(global-set-key (kbd "C-;") 'mark-end-of-line)

;; full screen
(global-set-key (kbd "C-c k f") 'full-screen)
(global-set-key (kbd "C-c k m") 'max-size)

;; ecb
(global-set-key (kbd "C-c e s") 'start-ecb)
(global-set-key (kbd "C-c e q") 'stop-ecb)
(global-set-key (kbd "C-c c m") 'ecb-goto-window-methods)
(global-set-key (kbd "C-c c h") 'ecb-goto-window-history)
(global-set-key (kbd "C-c c e") 'ecb-goto-window-edit1)
(global-set-key (kbd "C-c c d") 'ecb-goto-window-directories)
(global-set-key (kbd "C-c c s") 'ecb-goto-window-sources)


;; cflow
(global-set-key (kbd "C-c c f") 'get-cflow)


;; emms setup
;; (add-to-list 'load-path "/usr/share/emacs/site-lisp/emms")
;; (require 'emms-setup)
;; (require 'emms-player-mplayer)
;; (require 'emms-volume)
;; (require 'emms-mode-line)
;; (require 'emms-playing-time)
;; (emms-mode-line 1)
;; (emms-playing-time 1)
;; (emms-standard)
;; (emms-default-players)
;; (setq emms-player-mplayer-command-name "mplayer")
;; (setq emms-play-list '(emms-player-mplayer))
;; (add-hook 'emms-player-started-hook 'emms-show)
;; (setq emms-show-format "Playing %s")
;; (global-set-key (kbd "C-c e t") 'emms-play-directory-tree)
;; (global-set-key (kbd "C-c e x") 'emms-start)
;; (global-set-key (kbd "C-c e c") 'emms-stop)
;; (global-set-key (kbd "C-c e n") 'emms-next)
;; (global-set-key (kbd "C-c e p") 'emms-previous)
;; (global-set-key (kbd "C-c e o") 'emms-show)
;; (global-set-key (kbd "C-c e h") 'emms-shuffle)
;; (global-set-key (kbd "C-c e e") 'emms-play-file)
;; (global-set-key (kbd "C-c e f") 'emms-play-playlist)
;; (global-set-key (kbd "C-c e SPC") 'emms-pause)
;; (global-set-key (kbd "C-c e a") 'emms-add-directory-tree)
;; (global-set-key (kbd "C-c e r")   'emms-toggle-repeat-track)
;; (global-set-key (kbd "C-c e R")   'emms-toggle-repeat-playlist)
;; (global-set-key (kbd "C-c e s u") 'emms-score-up-playing)
;; (global-set-key (kbd "C-c e s d") 'emms-score-down-playing)
;; (global-set-key (kbd "C-c e s o") 'emms-score-show-playing)
;; (global-set-key (kbd "C-c e v u") 'emms-volume-raise)
;; (global-set-key (kbd "C-c e v d") 'emms-volume-lower)

;; playlist-mode-map
;; (define-key emms-playlist-mode-map (kbd "SPC") 'emms-pause)
;; (define-key emms-playlist-mode-map (kbd "+") 'emms-volume-raise)
;; (define-key emms-playlist-mode-map (kbd "-") 'emms-volume-lower)
;; (define-key emms-playlist-mode-map (kbd "<right>")
;;   (lambda () (interactive) (emms-seek +10)))
;; (define-key emms-playlist-mode-map (kbd "<left>")
;;   (lambda () (interactive) (emms-seek -10)))
;; (define-key emms-playlist-mode-map (kbd "<up>")
;;   (lambda () (interactive) (emms-seek +60)))
;; (define-key emms-playlist-mode-map (kbd "<down>")
;;   (lambda () (interactive) (emms-seek -60)))

(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(ecb-options-version "2.40")
 '(ecb-show-sources-in-directories-buffer (quote ("left7" "left13" "left14" "left15"))))
